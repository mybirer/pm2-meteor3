// Generated by CoffeeScript 2.7.0
(function () {
	var BashCmd, CWD, NodeSSH, _settings, abs, async, cli, cmdString, fs, getAppLocation, getBackupLocation, path;

	path = require('path');

	({ NodeSSH } = require('node-ssh'));

	cli = require('cli');

	fs = require('fs');

	async = require('async');

	_settings = require('./settings');

	CWD = process.cwd();

	abs = require('abs');

	getAppLocation = function (pm2mConf) {
		return path.join(pm2mConf.server.deploymentDir, pm2mConf.appName);
	};

	getBackupLocation = function (pm2mConf) {
		return path.join(getAppLocation(pm2mConf), _settings.backupDir);
	};

	BashCmd = function () {
		var appendCmd;

		class BashCmd {
			constructor(pm2mConf, rawCmd) {
				if (pm2mConf && rawCmd) {
					this.pm2mConf = pm2mConf;
					this.rawCmd = rawCmd;
				} else {
					throw new Error('You must pass a pm2mConf and a Command string...');
				}
			}

			getString() {
				var loadProfile, result;
				({ loadProfile } = this.pm2mConf.server);
				result = '';
				if (loadProfile) {
					result = appendCmd(result, `[[ -r ${loadProfile} ]] && . ${loadProfile}`);
				}
				result = appendCmd(result, this.rawCmd);
				return result;
			}
		}

		appendCmd = function (cmd1, cmd2) {
			if (cmd1) {
				return `${cmd1} && ${cmd2}`;
			} else {
				return `${cmd2}`;
			}
		};

		return BashCmd;
	}.call(this);

	cmdString = function (pm2mConf, cmd) {
		return new BashCmd(pm2mConf, cmd).getString();
	};

	// Remote tasks
	module.exports = {
		getRemoteSession: function (pm2mConf) {
			var connectOptions, ssh;
			ssh = new NodeSSH();
			connectOptions = {
				host: pm2mConf.server.host,
				username: pm2mConf.server.username,
				port: pm2mConf.server.port || 22,
			};
			if (pm2mConf.server.password) {
				connectOptions.password = pm2mConf.server.password;
			} else if (pm2mConf.server.pem) {
				connectOptions.privateKey = fs.readFileSync(abs(pm2mConf.server.pem));
			}
			if (pm2mConf.server.ssh) {
				Object.assign(connectOptions, pm2mConf.server.ssh);
			}
			return { ssh, connectOptions };
		},
		checkDeps: function ({ ssh, connectOptions }, pm2mConf, done) {
			var cmd;
			cmd = cmdString(
				pm2mConf,
				"(command -v node || echo 'missing node' 1>&2) && (command -v npm || echo 'missing npm' 1>&2) && (command -v pm2 || echo 'missing pm2' 1>&2)",
			);
			return ssh
				.connect(connectOptions)
				.then(function () {
					return ssh.execCommand(cmd);
				})
				.then(function (result) {
					if (result.stderr && result.stderr.length > 0 && /.*missing.*/.test(result.stderr)) {
						console.log('');
						console.log(result.stderr);
						return done({
							message: 'Please make sure you have node, npm and pm2 installed on your remote machine!',
						});
					} else {
						return done();
					}
				})
				.catch(function (err) {
					return done(err);
				});
		},
		prepareHost: function ({ ssh, connectOptions }, pm2mConf, done) {
			var cmd;
			cmd = cmdString(pm2mConf, `mkdir -p ${path.join(getAppLocation(pm2mConf), _settings.backupDir)}`);
			return ssh
				.connect(connectOptions)
				.then(function () {
					return ssh.execCommand(cmd);
				})
				.then(function (result) {
					if (result.stderr && result.stderr.length > 0) {
						return done({
							message: `${result.stderr}`,
						});
					} else {
						return done();
					}
				})
				.catch(function (err) {
					return done(err);
				});
		},
		shipTarBall: function ({ ssh, connectOptions }, pm2mConf, done) {
			var destination, tarLocation;
			tarLocation = path.join(CWD, _settings.bundleTarName);
			destination = path.join(getAppLocation(pm2mConf), _settings.bundleTarName);
			console.log(tarLocation);
			console.log(destination);
			return ssh
				.connect(connectOptions)
				.then(function () {
					return ssh.putFile(tarLocation, destination);
				})
				.then(function () {
					return done();
				})
				.catch(function (err) {
					return done(err);
				});
		},
		shipSettings: function ({ ssh, connectOptions }, pm2mConf, done) {
			var destination, fileLocation;
			fileLocation = path.join(CWD, _settings.pm2EnvConfigName);
			destination = path.join(getAppLocation(pm2mConf), _settings.pm2EnvConfigName);
			console.log(fileLocation);
			console.log(destination);
			return ssh
				.connect(connectOptions)
				.then(function () {
					return ssh.putFile(fileLocation, destination);
				})
				.then(function () {
					return done();
				})
				.catch(function (err) {
					return done(err);
				});
		},
		extractTarBall: function ({ ssh, connectOptions }, pm2mConf, done) {
			var cmd;
			cmd = cmdString(
				pm2mConf,
				`cd ${getAppLocation(pm2mConf)} && rm -rf ${_settings.bundleName} && tar -xf ${_settings.bundleTarName}`,
			);
			return ssh
				.connect(connectOptions)
				.then(function () {
					return ssh.execCommand(cmd);
				})
				.then(function (result) {
					return done();
				})
				.catch(function (err) {
					return done(err);
				});
		},
		installBundleDeps: function ({ ssh, connectOptions }, pm2mConf, done) {
			var cmd, serverLocation;
			serverLocation = path.join(getAppLocation(pm2mConf), _settings.bundleName, '/programs/server');
			cmd = cmdString(pm2mConf, `cd ${serverLocation} && node --version && npm install --production`);
			return ssh
				.connect(connectOptions)
				.then(function () {
					return ssh.execCommand(cmd);
				})
				.then(function (result) {
					return done();
				})
				.catch(function (err) {
					return done(err);
				});
		},
		startApp: function ({ ssh, connectOptions }, pm2mConf, done) {
			var cmd;
			cmd = cmdString(pm2mConf, `cd ${getAppLocation(pm2mConf)} && pm2 start ${_settings.pm2EnvConfigName}`);
			return ssh
				.connect(connectOptions)
				.then(function () {
					return ssh.execCommand(cmd);
				})
				.then(function (result) {
					if (result.stderr) {
						return done({
							message: result.stderr,
						});
					} else {
						return done();
					}
				})
				.catch(function (err) {
					return done(err);
				});
		},
		stopApp: function ({ ssh, connectOptions }, pm2mConf, done) {
			var cmd;
			cmd = cmdString(pm2mConf, `cd ${getAppLocation(pm2mConf)} && pm2 stop ${_settings.pm2EnvConfigName}`);
			return ssh
				.connect(connectOptions)
				.then(function () {
					return ssh.execCommand(cmd);
				})
				.then(function (result) {
					if (result.stderr) {
						return done({
							message: result.stderr,
						});
					} else {
						return done();
					}
				})
				.catch(function (err) {
					return done(err);
				});
		},
		status: function ({ ssh, connectOptions }, pm2mConf, done) {
			var cmd;
			cmd = cmdString(pm2mConf, `pm2 show ${pm2mConf.appName}`);
			return ssh
				.connect(connectOptions)
				.then(function () {
					return ssh.execCommand(cmd);
				})
				.then(function (result) {
					if (result.stderr) {
						done(null, result.stderr);
					}
					if (result.stdout) {
						return done(null, result.stdout);
					}
				})
				.catch(function (err) {
					return done(err);
				});
		},
		backupLastTar: function ({ ssh, connectOptions }, pm2mConf, done) {
			var cmd;
			cmd = cmdString(pm2mConf, `cd ${getAppLocation(pm2mConf)} && mv ${_settings.bundleTarName} backup/ 2>/dev/null`);
			return ssh
				.connect(connectOptions)
				.then(function () {
					return ssh.execCommand(cmd);
				})
				.then(function (result) {
					return done();
				})
				.catch(function (err) {
					return done();
				});
		},
		killApp: function ({ ssh, connectOptions }, pm2mConf, done) {
			var cmd;
			cmd = cmdString(pm2mConf, `pm2 delete ${pm2mConf.appName}`);
			return ssh
				.connect(connectOptions)
				.then(function () {
					return ssh.execCommand(cmd);
				})
				.then(function (result) {
					return done();
				})
				.catch(function (err) {
					return done(err);
				});
		},
		reloadApp: function ({ ssh, connectOptions }, pm2mConf, reconfig, cold, done) {
			if (cold) {
				console.log("Won't restart app. Please make sure to restart by yourself!");
				return done();
			} else if (reconfig) {
				return this.hardReloadApp({ ssh, connectOptions }, pm2mConf, done);
			} else {
				return this.softReloadApp({ ssh, connectOptions }, pm2mConf, done);
			}
		},
		softReloadApp: function ({ ssh, connectOptions }, pm2mConf, done) {
			var cmd;
			cmd = cmdString(pm2mConf, `cd ${getAppLocation(pm2mConf)} && pm2 startOrReload ${_settings.pm2EnvConfigName}`);
			return ssh
				.connect(connectOptions)
				.then(function () {
					return ssh.execCommand(cmd);
				})
				.then(function (result) {
					if (result.stderr) {
						console.log(result.stderr);
					}
					return done();
				})
				.catch(function (err) {
					return done(err);
				});
		},
		hardReloadApp: function ({ ssh, connectOptions }, pm2mConf, done) {
			var cmd1;
			cmd1 = cmdString(pm2mConf, `cd ${getAppLocation(pm2mConf)} && pm2 delete ${pm2mConf.appName}`);
			return ssh
				.connect(connectOptions)
				.then(function () {
					return ssh.execCommand(cmd1);
				})
				.then(function (result) {
					var cmd2;
					if (result.stderr) {
						console.log(result.stderr);
					}
					cmd2 = cmdString(pm2mConf, `cd ${getAppLocation(pm2mConf)} && pm2 start ${_settings.pm2EnvConfigName}`);
					return ssh.execCommand(cmd2);
				})
				.then(function (result) {
					if (result.stderr) {
						console.log(result.stderr);
					}
					return done();
				})
				.catch(function (err) {
					return done(err);
				});
		},
		deleteAppFolder: function ({ ssh, connectOptions }, pm2mConf, done) {
			var cmd;
			cmd = cmdString(pm2mConf, `rm -rf ${getAppLocation(pm2mConf)}`);
			return ssh
				.connect(connectOptions)
				.then(function () {
					return ssh.execCommand(cmd);
				})
				.then(function (result) {
					if (result.stderr) {
						console.log(result.stderr);
					}
					return done();
				})
				.catch(function (err) {
					return done(err);
				});
		},
		scaleApp: function ({ ssh, connectOptions }, pm2mConf, sParam, done) {
			var cmd;
			cmd = cmdString(pm2mConf, `pm2 scale ${pm2mConf.appName} ${sParam}`);
			return ssh
				.connect(connectOptions)
				.then(function () {
					return ssh.execCommand(cmd);
				})
				.then(function (result) {
					if (result.stderr) {
						done({
							message: result.stderr,
						});
					}
					if (result.stdout) {
						console.log(result.stdout);
					}
					return done();
				})
				.catch(function (err) {
					return done(err);
				});
		},
		getAppLogs: function ({ ssh, connectOptions }, pm2mConf, done) {
			var cmd;
			cmd = cmdString(pm2mConf, `pm2 logs ${pm2mConf.appName}`);
			return ssh
				.connect(connectOptions)
				.then(function () {
					return ssh.execCommand(cmd);
				})
				.then(function (result) {
					if (result.stdout) {
						console.log(result.stdout);
					}
					if (result.stderr) {
						return done({
							message: result.stderr,
						});
					} else {
						return done();
					}
				})
				.catch(function (err) {
					return done(err);
				});
		},
		revertToBackup: function ({ ssh, connectOptions }, pm2mConf, done) {
			var appLocation, backupLocation, cmd;
			appLocation = getAppLocation(pm2mConf);
			backupLocation = getBackupLocation(pm2mConf);
			cmd = cmdString(
				pm2mConf,
				`mv ${path.join(backupLocation, _settings.bundleTarName)} ${path.join(appLocation, _settings.bundleTarName)}`,
			);
			console.log(`executing ${cmd}`);
			return ssh
				.connect(connectOptions)
				.then(function () {
					return ssh.execCommand(cmd);
				})
				.then(function (result) {
					if (result.stderr) {
						console.log('*** stderr while reverting to backup ***');
						done({
							message: result.stderr,
						});
					}
					if (result.stdout) {
						console.log(result.stdout);
					}
					return done();
				})
				.catch(function (err) {
					return done(err);
				});
		},
	};
}).call(this);
